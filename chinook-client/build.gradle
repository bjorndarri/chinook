plugins {
    id 'org.beryx.jlink' version "${jlinkVersion}"
    id "de.jjohannes.extra-java-module-info" version "${extraJavaModuleInfoVersion}"
}

apply plugin: 'application'

configurations {
    runtimeLocal.extendsFrom runtimeClasspath
    runtimeRemote.extendsFrom runtimeClasspath
}

dependencies {
    implementation project(':chinook-domain-api')

    implementation "is.codion.jdk11:codion-swing-framework-ui:${version}"
    implementation "is.codion.jdk11:codion-plugin-imagepanel:${version}"
    implementation "is.codion.jdk11:codion-plugin-ikonli-foundation:${version}"

    implementation "org.pushing-pixels:radiance-substance:${radianceVersion}"
    implementation "org.pushing-pixels:radiance-substance-extras:${radianceVersion}"

    runtimeOnly ("is.codion.jdk11:codion-plugin-logback-proxy:${version}") {
        exclude group: 'com.sun.mail', module: 'javax.mail'
    }

    runtimeLocal project(':chinook-domain')
    runtimeLocal "is.codion.jdk11:codion-framework-db-local:${version}"
    runtimeLocal "is.codion.jdk11:codion-dbms-h2database:${version}"
    runtimeLocal "com.h2database:h2:1.4.200"

    runtimeRemote "is.codion.jdk11:codion-framework-db-rmi:${version}"
    runtimeRemote "is.codion.jdk11:codion-framework-db-http:${version}"

    testImplementation "is.codion.jdk11:codion-framework-db-local:${version}"
    testImplementation "is.codion.jdk11:codion-dbms-h2database:${version}"
    testImplementation "com.h2database:h2:1.4.200"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntimeOnly project(':chinook-domain')
}

apply from: "../extra-module-info-jasperreports.gradle"
apply from: "../extra-module-info-radiance.gradle"

java {
    modularity.inferModulePath = true
}

test {
    useJUnitPlatform()
    systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
    systemProperty "codion.db.initScripts", "classpath:create_schema.sql"
}

application {
    mainModule = "is.codion.framework.demos.chinook.client"
    mainClassName = "is.codion.framework.demos.chinook.ui.ChinookAppPanel"
    applicationDefaultJvmArgs = [
            //add-reads for accessing default methods for Entity types
            "--add-reads", "is.codion.framework.domain=is.codion.framework.demos.chinook.domain.api",
            "-Dcodion.client.connectionType=local",
            "-Dcodion.db.url=jdbc:h2:mem:h2db",
            "-Dcodion.db.initScripts=classpath:create_schema.sql",
            "-Dsun.awt.disablegrab=true"
    ]
}

task runLocal(type: JavaExec) {
    group 'application'
    main = application.mainClassName
    classpath = configurations.runtimeLocal + sourceSets.main.getRuntimeClasspath()
    systemProperties = [
            'codion.client.connectionType' : 'local',
            'codion.db.url'                : 'jdbc:h2:mem:h2db',
            'codion.db.initScripts'        : 'classpath:create_schema.sql',
            'sun.awt.disablegrab'          : 'true'
    ]
}

task runRmi(type: JavaExec) {
    group 'application'
    main = application.mainClassName
    classpath = configurations.runtimeRemote + sourceSets.main.getRuntimeClasspath()
    systemProperties = [
            'codion.client.connectionType'    : 'remote',
            'codion.server.hostname'          : "${serverHost}",
            'codion.server.registryPort'      : "${serverRegistryPort}",
            'javax.net.ssl.trustStore'        : 'truststore.jks',
            'javax.net.ssl.trustStorePassword': 'crappypass',
            'sun.awt.disablegrab'             : 'true'
    ]
}

task runHttp(type: JavaExec) {
    group 'application'
    main = application.mainClassName
    classpath = configurations.runtimeRemote + sourceSets.main.getRuntimeClasspath()
    systemProperties = [
            'codion.client.connectionType' : 'http',
            'codion.client.http.secure'    : 'false',
            'codion.client.http.hostname'  : "${serverHost}",
            'codion.client.http.port'      : "${serverHttpPort}",
            'sun.awt.disablegrab'          : 'true'
    ]
}

jlink {
    imageName = "chinook-local"
    configuration = 'runtimeLocal'
    options = ['--bind-services', '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'chinook-local'
        jvmArgs = [
                "-Dcodion.client.connectionType=local",
                "-Dcodion.db.url=jdbc:h2:mem:h2db",
                "-Dcodion.db.initScripts=classpath:create_schema.sql",
                "--add-reads", "is.codion.swing.framework.model=chinook.merged.module",//for json,
                "--add-reads", "is.codion.framework.domain=is.codion.framework.demos.chinook.domain.api"//default methods
        ]
    }

    jpackage {
        installerType = "deb"
        installerOptions = ['--linux-shortcut']
    }
}

/*jlink {
    imageName = "chinook-remote"
    configuration = 'runtimeRemote'
    options = ['--bind-services', '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    mergedModule {
        excludeRequires 'com.fasterxml.jackson.core', 'com.fasterxml.jackson.annotation', 'com.fasterxml.jackson.databind'
    }

    launcher {
        name = 'chinook-http'
        jvmArgs = [
                "-Dcodion.client.connectionType=http",
                "-Dcodion.client.http.secure=false",
                "-Dcodion.client.http.hostname=${serverHost}",
                "-Dcodion.client.http.port=${serverHttpPort}",
                "--add-reads", "is.codion.swing.framework.model=chinook.merged.module"//for json
        ]
    }

    secondaryLauncher {
        name = 'chinook-rmi'
        mainClass = application.mainClassName
        jvmArgs = [
                "-Dcodion.client.connectionType=remote",
                "-Dcodion.server.hostname=${serverHost}",
                "-Dcodion.server.registryPort=${serverRegistryPort}",
                "-Djavax.net.ssl.trustStore=truststore.jks",
                "-Djavax.net.ssl.trustStorePassword=crappypass",
                "--add-reads", "is.codion.swing.framework.model=chinook.merged.module"//for json
        ]
    }

    jpackage {
        installerType = "deb"
        installerOptions = ['--linux-shortcut']
    }
}*/