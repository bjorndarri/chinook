plugins {
    id 'chinook.application'
}

dependencies {
    implementation project(':chinook-client')

    runtimeOnly "is.codion.jdk11:codion-framework-db-http:${version}"
}

applicationDefaultJvmArgs = [
        "-Dcodion.client.connectionType=http",
        "-Dcodion.client.http.secure=false",
        "-Dcodion.client.http.hostname=${serverHost}",
        "-Dlogback.configurationFile=src/main/config/logback.xml",
        "-Dsun.awt.disablegrab=true"
]

application {
    mainModule = "is.codion.framework.demos.chinook.client"
    getMainClass().set("is.codion.framework.demos.chinook.ui.ChinookAppPanel")
}

jlink {
    imageName = project.name
    moduleName = application.mainModule
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--add-modules',
               'is.codion.framework.db.http,is.codion.plugin.logback.proxy']

    mergedModule {
        excludeRequires("com.fasterxml.jackson.annotation")
    }

    launcher {
        jvmArgs = applicationDefaultJvmArgs
        jvmArgs += ["--add-reads", "chinook.merged.module=org.slf4j"]//for sslcontext-kickstart
    }

    jpackage {
        imageName = "Chinook-Http"
        appVersion = project.version.replace('-SNAPSHOT', '')
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            installerType = 'deb'
            icon = "../chinook.png"
            installerOptions = [
                    '--resource-dir', 'build/jpackage/Chinook-Http/lib',
                    '--linux-shortcut'
            ]
        }
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = 'msi'
            icon = "../chinook.ico"
            installerOptions = [
                    '--win-menu',
                    '--win-shortcut'
            ]
        }
    }
}

prepareMergedJarsDir.doLast {
    copy {
        from 'src/main/resources'
        into "$jlinkBasePath/mergedjars"
    }
}