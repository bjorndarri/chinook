plugins {
    id 'chinook.library'
}

apply plugin: BuildReportsPlugin

dependencies {
    api project(':chinook-domain-api')
    implementation "is.codion.jdk11:codion-common-rmi:${version}"
    implementation "is.codion.jdk11:codion-framework-db-local:${version}"

    runtimeOnly "commons-logging:commons-logging:${commonsLoggingVersion}"
    runtimeOnly "commons-digester:commons-digester:${commonsDigesterVersion}"
    runtimeOnly "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"
    runtimeOnly "commons-beanutils:commons-beanutils:${commonsBeanUtilsVersion}"
    runtimeOnly "org.eclipse.jdt:ecj:${ecjVersion}"

    testImplementation "is.codion.jdk11:codion-framework-domain-test:${version}"
    testRuntimeOnly "is.codion.jdk11:codion-dbms-h2database:${version}"
    testRuntimeOnly "com.h2database:h2:1.4.200"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

test {
    useJUnitPlatform()
    systemProperty "codion.test.user", "scott:tiger"
    systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
    systemProperty "codion.db.initScripts", "classpath:create_schema.sql"
}

buildReports {
    taskClasspath = configurations.runtimeClasspath.asPath
    buildClasspath = sourceSets.main.output.classesDirs
    sourceDir = file('src/main/reports')
    targetDir = file(sourceSets.main.output.resourcesDir.toString() + '/is/codion/framework/demos/chinook/domain')
}